// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package tracing

import (
	json "encoding/json"
	io "github.com/knq/chromedp/cdp/io"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing(in *jlexer.Lexer, out *TraceConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "recordMode":
			(out.RecordMode).UnmarshalEasyJSON(in)
		case "enableSampling":
			out.EnableSampling = bool(in.Bool())
		case "enableSystrace":
			out.EnableSystrace = bool(in.Bool())
		case "enableArgumentFilter":
			out.EnableArgumentFilter = bool(in.Bool())
		case "includedCategories":
			if in.IsNull() {
				in.Skip()
				out.IncludedCategories = nil
			} else {
				in.Delim('[')
				if out.IncludedCategories == nil {
					if !in.IsDelim(']') {
						out.IncludedCategories = make([]string, 0, 4)
					} else {
						out.IncludedCategories = []string{}
					}
				} else {
					out.IncludedCategories = (out.IncludedCategories)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.IncludedCategories = append(out.IncludedCategories, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "excludedCategories":
			if in.IsNull() {
				in.Skip()
				out.ExcludedCategories = nil
			} else {
				in.Delim('[')
				if out.ExcludedCategories == nil {
					if !in.IsDelim(']') {
						out.ExcludedCategories = make([]string, 0, 4)
					} else {
						out.ExcludedCategories = []string{}
					}
				} else {
					out.ExcludedCategories = (out.ExcludedCategories)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.ExcludedCategories = append(out.ExcludedCategories, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "syntheticDelays":
			if in.IsNull() {
				in.Skip()
				out.SyntheticDelays = nil
			} else {
				in.Delim('[')
				if out.SyntheticDelays == nil {
					if !in.IsDelim(']') {
						out.SyntheticDelays = make([]string, 0, 4)
					} else {
						out.SyntheticDelays = []string{}
					}
				} else {
					out.SyntheticDelays = (out.SyntheticDelays)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.SyntheticDelays = append(out.SyntheticDelays, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "memoryDumpConfig":
			if in.IsNull() {
				in.Skip()
				out.MemoryDumpConfig = nil
			} else {
				if out.MemoryDumpConfig == nil {
					out.MemoryDumpConfig = new(MemoryDumpConfig)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.MemoryDumpConfig = make(MemoryDumpConfig)
					} else {
						*out.MemoryDumpConfig = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v4 interface{}
						if m, ok := v4.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v4.(json.Unmarshaler); ok {
							m.UnmarshalJSON(in.Raw())
						} else {
							v4 = in.Interface()
						}
						(*out.MemoryDumpConfig)[key] = v4
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing(out *jwriter.Writer, in TraceConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RecordMode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"recordMode\":")
		(in.RecordMode).MarshalEasyJSON(out)
	}
	if in.EnableSampling {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"enableSampling\":")
		out.Bool(bool(in.EnableSampling))
	}
	if in.EnableSystrace {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"enableSystrace\":")
		out.Bool(bool(in.EnableSystrace))
	}
	if in.EnableArgumentFilter {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"enableArgumentFilter\":")
		out.Bool(bool(in.EnableArgumentFilter))
	}
	if len(in.IncludedCategories) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"includedCategories\":")
		if in.IncludedCategories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.IncludedCategories {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExcludedCategories) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"excludedCategories\":")
		if in.ExcludedCategories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.ExcludedCategories {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	if len(in.SyntheticDelays) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"syntheticDelays\":")
		if in.SyntheticDelays == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.SyntheticDelays {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	if in.MemoryDumpConfig != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"memoryDumpConfig\":")
		if in.MemoryDumpConfig == nil {
			out.RawString("null")
		} else {
			if *in.MemoryDumpConfig == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v11First := true
				for v11Name, v11Value := range *in.MemoryDumpConfig {
					if !v11First {
						out.RawByte(',')
					}
					v11First = false
					out.String(string(v11Name))
					out.RawByte(':')
					if m, ok := v11Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v11Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v11Value))
					}
				}
				out.RawByte('}')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TraceConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TraceConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing1(in *jlexer.Lexer, out *StartParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bufferUsageReportingInterval":
			out.BufferUsageReportingInterval = float64(in.Float64())
		case "transferMode":
			(out.TransferMode).UnmarshalEasyJSON(in)
		case "traceConfig":
			if in.IsNull() {
				in.Skip()
				out.TraceConfig = nil
			} else {
				if out.TraceConfig == nil {
					out.TraceConfig = new(TraceConfig)
				}
				(*out.TraceConfig).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing1(out *jwriter.Writer, in StartParams) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BufferUsageReportingInterval != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bufferUsageReportingInterval\":")
		out.Float64(float64(in.BufferUsageReportingInterval))
	}
	if in.TransferMode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"transferMode\":")
		(in.TransferMode).MarshalEasyJSON(out)
	}
	if in.TraceConfig != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"traceConfig\":")
		if in.TraceConfig == nil {
			out.RawString("null")
		} else {
			(*in.TraceConfig).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StartParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StartParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StartParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StartParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing1(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing2(in *jlexer.Lexer, out *RequestMemoryDumpReturns) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dumpGuid":
			out.DumpGUID = string(in.String())
		case "success":
			out.Success = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing2(out *jwriter.Writer, in RequestMemoryDumpReturns) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DumpGUID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dumpGuid\":")
		out.String(string(in.DumpGUID))
	}
	if in.Success {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"success\":")
		out.Bool(bool(in.Success))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestMemoryDumpReturns) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestMemoryDumpReturns) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestMemoryDumpReturns) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestMemoryDumpReturns) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing2(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing3(in *jlexer.Lexer, out *RequestMemoryDumpParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing3(out *jwriter.Writer, in RequestMemoryDumpParams) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestMemoryDumpParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestMemoryDumpParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestMemoryDumpParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestMemoryDumpParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing3(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing4(in *jlexer.Lexer, out *RecordClockSyncMarkerParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "syncId":
			out.SyncID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing4(out *jwriter.Writer, in RecordClockSyncMarkerParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"syncId\":")
	out.String(string(in.SyncID))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RecordClockSyncMarkerParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RecordClockSyncMarkerParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RecordClockSyncMarkerParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RecordClockSyncMarkerParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing4(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing5(in *jlexer.Lexer, out *GetCategoriesReturns) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]string, 0, 4)
					} else {
						out.Categories = []string{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.Categories = append(out.Categories, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing5(out *jwriter.Writer, in GetCategoriesReturns) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Categories) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"categories\":")
		if in.Categories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Categories {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetCategoriesReturns) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetCategoriesReturns) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetCategoriesReturns) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetCategoriesReturns) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing5(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing6(in *jlexer.Lexer, out *GetCategoriesParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing6(out *jwriter.Writer, in GetCategoriesParams) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetCategoriesParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetCategoriesParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetCategoriesParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetCategoriesParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing6(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing7(in *jlexer.Lexer, out *EventTracingComplete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stream":
			out.Stream = io.StreamHandle(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing7(out *jwriter.Writer, in EventTracingComplete) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Stream != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"stream\":")
		out.String(string(in.Stream))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventTracingComplete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventTracingComplete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventTracingComplete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventTracingComplete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing7(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing8(in *jlexer.Lexer, out *EventDataCollected) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				in.Delim('[')
				if out.Value == nil {
					if !in.IsDelim(']') {
						out.Value = make([]easyjson.RawMessage, 0, 2)
					} else {
						out.Value = []easyjson.RawMessage{}
					}
				} else {
					out.Value = (out.Value)[:0]
				}
				for !in.IsDelim(']') {
					var v15 easyjson.RawMessage
					(v15).UnmarshalEasyJSON(in)
					out.Value = append(out.Value, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing8(out *jwriter.Writer, in EventDataCollected) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Value) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		if in.Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Value {
				if v16 > 0 {
					out.RawByte(',')
				}
				(v17).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventDataCollected) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventDataCollected) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventDataCollected) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventDataCollected) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing8(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing9(in *jlexer.Lexer, out *EventBufferUsage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "percentFull":
			out.PercentFull = float64(in.Float64())
		case "eventCount":
			out.EventCount = float64(in.Float64())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing9(out *jwriter.Writer, in EventBufferUsage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PercentFull != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"percentFull\":")
		out.Float64(float64(in.PercentFull))
	}
	if in.EventCount != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"eventCount\":")
		out.Float64(float64(in.EventCount))
	}
	if in.Value != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventBufferUsage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventBufferUsage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventBufferUsage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventBufferUsage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing9(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing10(in *jlexer.Lexer, out *EndParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing10(out *jwriter.Writer, in EndParams) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EndParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EndParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpTracing10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EndParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EndParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpTracing10(l, v)
}
