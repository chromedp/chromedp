// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package overlay

import (
	json "encoding/json"
	cdp "github.com/knq/chromedp/cdp"
	dom "github.com/knq/chromedp/cdp/dom"
	page "github.com/knq/chromedp/cdp/page"
	runtime "github.com/knq/chromedp/cdp/runtime"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay(in *jlexer.Lexer, out *SetSuspendedParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "suspended":
			out.Suspended = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay(out *jwriter.Writer, in SetSuspendedParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"suspended\":")
	out.Bool(bool(in.Suspended))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetSuspendedParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetSuspendedParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetSuspendedParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetSuspendedParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay1(in *jlexer.Lexer, out *SetShowViewportSizeOnResizeParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "show":
			out.Show = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay1(out *jwriter.Writer, in SetShowViewportSizeOnResizeParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"show\":")
	out.Bool(bool(in.Show))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetShowViewportSizeOnResizeParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetShowViewportSizeOnResizeParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetShowViewportSizeOnResizeParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetShowViewportSizeOnResizeParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay1(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay2(in *jlexer.Lexer, out *SetShowScrollBottleneckRectsParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "show":
			out.Show = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay2(out *jwriter.Writer, in SetShowScrollBottleneckRectsParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"show\":")
	out.Bool(bool(in.Show))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetShowScrollBottleneckRectsParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetShowScrollBottleneckRectsParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetShowScrollBottleneckRectsParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetShowScrollBottleneckRectsParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay2(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay3(in *jlexer.Lexer, out *SetShowPaintRectsParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			out.Result = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay3(out *jwriter.Writer, in SetShowPaintRectsParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"result\":")
	out.Bool(bool(in.Result))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetShowPaintRectsParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetShowPaintRectsParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetShowPaintRectsParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetShowPaintRectsParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay3(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay4(in *jlexer.Lexer, out *SetShowFPSCounterParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "show":
			out.Show = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay4(out *jwriter.Writer, in SetShowFPSCounterParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"show\":")
	out.Bool(bool(in.Show))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetShowFPSCounterParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetShowFPSCounterParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetShowFPSCounterParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetShowFPSCounterParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay4(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay5(in *jlexer.Lexer, out *SetShowDebugBordersParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "show":
			out.Show = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay5(out *jwriter.Writer, in SetShowDebugBordersParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"show\":")
	out.Bool(bool(in.Show))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetShowDebugBordersParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetShowDebugBordersParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetShowDebugBordersParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetShowDebugBordersParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay5(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay6(in *jlexer.Lexer, out *SetPausedInDebuggerMessageParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay6(out *jwriter.Writer, in SetPausedInDebuggerMessageParams) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Message != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"message\":")
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetPausedInDebuggerMessageParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetPausedInDebuggerMessageParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetPausedInDebuggerMessageParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetPausedInDebuggerMessageParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay6(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay7(in *jlexer.Lexer, out *SetInspectModeParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mode":
			(out.Mode).UnmarshalEasyJSON(in)
		case "highlightConfig":
			if in.IsNull() {
				in.Skip()
				out.HighlightConfig = nil
			} else {
				if out.HighlightConfig == nil {
					out.HighlightConfig = new(HighlightConfig)
				}
				(*out.HighlightConfig).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay7(out *jwriter.Writer, in SetInspectModeParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mode\":")
	(in.Mode).MarshalEasyJSON(out)
	if in.HighlightConfig != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"highlightConfig\":")
		if in.HighlightConfig == nil {
			out.RawString("null")
		} else {
			(*in.HighlightConfig).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetInspectModeParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetInspectModeParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetInspectModeParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetInspectModeParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay7(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay8(in *jlexer.Lexer, out *HighlightRectParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "x":
			out.X = int64(in.Int64())
		case "y":
			out.Y = int64(in.Int64())
		case "width":
			out.Width = int64(in.Int64())
		case "height":
			out.Height = int64(in.Int64())
		case "color":
			if in.IsNull() {
				in.Skip()
				out.Color = nil
			} else {
				if out.Color == nil {
					out.Color = new(cdp.RGBA)
				}
				(*out.Color).UnmarshalEasyJSON(in)
			}
		case "outlineColor":
			if in.IsNull() {
				in.Skip()
				out.OutlineColor = nil
			} else {
				if out.OutlineColor == nil {
					out.OutlineColor = new(cdp.RGBA)
				}
				(*out.OutlineColor).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay8(out *jwriter.Writer, in HighlightRectParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"x\":")
	out.Int64(int64(in.X))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"y\":")
	out.Int64(int64(in.Y))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"width\":")
	out.Int64(int64(in.Width))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"height\":")
	out.Int64(int64(in.Height))
	if in.Color != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"color\":")
		if in.Color == nil {
			out.RawString("null")
		} else {
			(*in.Color).MarshalEasyJSON(out)
		}
	}
	if in.OutlineColor != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"outlineColor\":")
		if in.OutlineColor == nil {
			out.RawString("null")
		} else {
			(*in.OutlineColor).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HighlightRectParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HighlightRectParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HighlightRectParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HighlightRectParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay8(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay9(in *jlexer.Lexer, out *HighlightQuadParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "quad":
			if in.IsNull() {
				in.Skip()
				out.Quad = nil
			} else {
				in.Delim('[')
				if out.Quad == nil {
					if !in.IsDelim(']') {
						out.Quad = make(dom.Quad, 0, 8)
					} else {
						out.Quad = dom.Quad{}
					}
				} else {
					out.Quad = (out.Quad)[:0]
				}
				for !in.IsDelim(']') {
					var v1 float64
					v1 = float64(in.Float64())
					out.Quad = append(out.Quad, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "color":
			if in.IsNull() {
				in.Skip()
				out.Color = nil
			} else {
				if out.Color == nil {
					out.Color = new(cdp.RGBA)
				}
				(*out.Color).UnmarshalEasyJSON(in)
			}
		case "outlineColor":
			if in.IsNull() {
				in.Skip()
				out.OutlineColor = nil
			} else {
				if out.OutlineColor == nil {
					out.OutlineColor = new(cdp.RGBA)
				}
				(*out.OutlineColor).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay9(out *jwriter.Writer, in HighlightQuadParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"quad\":")
	if in.Quad == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Quad {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.Float64(float64(v3))
		}
		out.RawByte(']')
	}
	if in.Color != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"color\":")
		if in.Color == nil {
			out.RawString("null")
		} else {
			(*in.Color).MarshalEasyJSON(out)
		}
	}
	if in.OutlineColor != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"outlineColor\":")
		if in.OutlineColor == nil {
			out.RawString("null")
		} else {
			(*in.OutlineColor).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HighlightQuadParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HighlightQuadParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HighlightQuadParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HighlightQuadParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay9(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay10(in *jlexer.Lexer, out *HighlightNodeParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "highlightConfig":
			if in.IsNull() {
				in.Skip()
				out.HighlightConfig = nil
			} else {
				if out.HighlightConfig == nil {
					out.HighlightConfig = new(HighlightConfig)
				}
				(*out.HighlightConfig).UnmarshalEasyJSON(in)
			}
		case "nodeId":
			(out.NodeID).UnmarshalEasyJSON(in)
		case "backendNodeId":
			(out.BackendNodeID).UnmarshalEasyJSON(in)
		case "objectId":
			out.ObjectID = runtime.RemoteObjectID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay10(out *jwriter.Writer, in HighlightNodeParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"highlightConfig\":")
	if in.HighlightConfig == nil {
		out.RawString("null")
	} else {
		(*in.HighlightConfig).MarshalEasyJSON(out)
	}
	if in.NodeID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"nodeId\":")
		out.Int64(int64(in.NodeID))
	}
	if in.BackendNodeID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"backendNodeId\":")
		out.Int64(int64(in.BackendNodeID))
	}
	if in.ObjectID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"objectId\":")
		out.String(string(in.ObjectID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HighlightNodeParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HighlightNodeParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HighlightNodeParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HighlightNodeParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay10(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay11(in *jlexer.Lexer, out *HighlightFrameParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "frameId":
			(out.FrameID).UnmarshalEasyJSON(in)
		case "contentColor":
			if in.IsNull() {
				in.Skip()
				out.ContentColor = nil
			} else {
				if out.ContentColor == nil {
					out.ContentColor = new(cdp.RGBA)
				}
				(*out.ContentColor).UnmarshalEasyJSON(in)
			}
		case "contentOutlineColor":
			if in.IsNull() {
				in.Skip()
				out.ContentOutlineColor = nil
			} else {
				if out.ContentOutlineColor == nil {
					out.ContentOutlineColor = new(cdp.RGBA)
				}
				(*out.ContentOutlineColor).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay11(out *jwriter.Writer, in HighlightFrameParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"frameId\":")
	out.String(string(in.FrameID))
	if in.ContentColor != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"contentColor\":")
		if in.ContentColor == nil {
			out.RawString("null")
		} else {
			(*in.ContentColor).MarshalEasyJSON(out)
		}
	}
	if in.ContentOutlineColor != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"contentOutlineColor\":")
		if in.ContentOutlineColor == nil {
			out.RawString("null")
		} else {
			(*in.ContentOutlineColor).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HighlightFrameParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HighlightFrameParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HighlightFrameParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HighlightFrameParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay11(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay12(in *jlexer.Lexer, out *HighlightConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "showInfo":
			out.ShowInfo = bool(in.Bool())
		case "showRulers":
			out.ShowRulers = bool(in.Bool())
		case "showExtensionLines":
			out.ShowExtensionLines = bool(in.Bool())
		case "displayAsMaterial":
			out.DisplayAsMaterial = bool(in.Bool())
		case "contentColor":
			if in.IsNull() {
				in.Skip()
				out.ContentColor = nil
			} else {
				if out.ContentColor == nil {
					out.ContentColor = new(cdp.RGBA)
				}
				(*out.ContentColor).UnmarshalEasyJSON(in)
			}
		case "paddingColor":
			if in.IsNull() {
				in.Skip()
				out.PaddingColor = nil
			} else {
				if out.PaddingColor == nil {
					out.PaddingColor = new(cdp.RGBA)
				}
				(*out.PaddingColor).UnmarshalEasyJSON(in)
			}
		case "borderColor":
			if in.IsNull() {
				in.Skip()
				out.BorderColor = nil
			} else {
				if out.BorderColor == nil {
					out.BorderColor = new(cdp.RGBA)
				}
				(*out.BorderColor).UnmarshalEasyJSON(in)
			}
		case "marginColor":
			if in.IsNull() {
				in.Skip()
				out.MarginColor = nil
			} else {
				if out.MarginColor == nil {
					out.MarginColor = new(cdp.RGBA)
				}
				(*out.MarginColor).UnmarshalEasyJSON(in)
			}
		case "eventTargetColor":
			if in.IsNull() {
				in.Skip()
				out.EventTargetColor = nil
			} else {
				if out.EventTargetColor == nil {
					out.EventTargetColor = new(cdp.RGBA)
				}
				(*out.EventTargetColor).UnmarshalEasyJSON(in)
			}
		case "shapeColor":
			if in.IsNull() {
				in.Skip()
				out.ShapeColor = nil
			} else {
				if out.ShapeColor == nil {
					out.ShapeColor = new(cdp.RGBA)
				}
				(*out.ShapeColor).UnmarshalEasyJSON(in)
			}
		case "shapeMarginColor":
			if in.IsNull() {
				in.Skip()
				out.ShapeMarginColor = nil
			} else {
				if out.ShapeMarginColor == nil {
					out.ShapeMarginColor = new(cdp.RGBA)
				}
				(*out.ShapeMarginColor).UnmarshalEasyJSON(in)
			}
		case "selectorList":
			out.SelectorList = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay12(out *jwriter.Writer, in HighlightConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ShowInfo {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"showInfo\":")
		out.Bool(bool(in.ShowInfo))
	}
	if in.ShowRulers {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"showRulers\":")
		out.Bool(bool(in.ShowRulers))
	}
	if in.ShowExtensionLines {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"showExtensionLines\":")
		out.Bool(bool(in.ShowExtensionLines))
	}
	if in.DisplayAsMaterial {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"displayAsMaterial\":")
		out.Bool(bool(in.DisplayAsMaterial))
	}
	if in.ContentColor != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"contentColor\":")
		if in.ContentColor == nil {
			out.RawString("null")
		} else {
			(*in.ContentColor).MarshalEasyJSON(out)
		}
	}
	if in.PaddingColor != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"paddingColor\":")
		if in.PaddingColor == nil {
			out.RawString("null")
		} else {
			(*in.PaddingColor).MarshalEasyJSON(out)
		}
	}
	if in.BorderColor != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"borderColor\":")
		if in.BorderColor == nil {
			out.RawString("null")
		} else {
			(*in.BorderColor).MarshalEasyJSON(out)
		}
	}
	if in.MarginColor != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marginColor\":")
		if in.MarginColor == nil {
			out.RawString("null")
		} else {
			(*in.MarginColor).MarshalEasyJSON(out)
		}
	}
	if in.EventTargetColor != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"eventTargetColor\":")
		if in.EventTargetColor == nil {
			out.RawString("null")
		} else {
			(*in.EventTargetColor).MarshalEasyJSON(out)
		}
	}
	if in.ShapeColor != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"shapeColor\":")
		if in.ShapeColor == nil {
			out.RawString("null")
		} else {
			(*in.ShapeColor).MarshalEasyJSON(out)
		}
	}
	if in.ShapeMarginColor != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"shapeMarginColor\":")
		if in.ShapeMarginColor == nil {
			out.RawString("null")
		} else {
			(*in.ShapeMarginColor).MarshalEasyJSON(out)
		}
	}
	if in.SelectorList != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"selectorList\":")
		out.String(string(in.SelectorList))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HighlightConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HighlightConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HighlightConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HighlightConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay12(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay13(in *jlexer.Lexer, out *HideHighlightParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay13(out *jwriter.Writer, in HideHighlightParams) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HideHighlightParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HideHighlightParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HideHighlightParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HideHighlightParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay13(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay14(in *jlexer.Lexer, out *GetHighlightObjectForTestReturns) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "highlight":
			(out.Highlight).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay14(out *jwriter.Writer, in GetHighlightObjectForTestReturns) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.Highlight).IsDefined() {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"highlight\":")
		(in.Highlight).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetHighlightObjectForTestReturns) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetHighlightObjectForTestReturns) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetHighlightObjectForTestReturns) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetHighlightObjectForTestReturns) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay14(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay15(in *jlexer.Lexer, out *GetHighlightObjectForTestParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodeId":
			(out.NodeID).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay15(out *jwriter.Writer, in GetHighlightObjectForTestParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nodeId\":")
	out.Int64(int64(in.NodeID))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetHighlightObjectForTestParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetHighlightObjectForTestParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetHighlightObjectForTestParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetHighlightObjectForTestParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay15(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay16(in *jlexer.Lexer, out *EventScreenshotRequested) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "viewport":
			if in.IsNull() {
				in.Skip()
				out.Viewport = nil
			} else {
				if out.Viewport == nil {
					out.Viewport = new(page.Viewport)
				}
				(*out.Viewport).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay16(out *jwriter.Writer, in EventScreenshotRequested) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"viewport\":")
	if in.Viewport == nil {
		out.RawString("null")
	} else {
		(*in.Viewport).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventScreenshotRequested) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventScreenshotRequested) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventScreenshotRequested) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventScreenshotRequested) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay16(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay17(in *jlexer.Lexer, out *EventNodeHighlightRequested) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodeId":
			(out.NodeID).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay17(out *jwriter.Writer, in EventNodeHighlightRequested) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nodeId\":")
	out.Int64(int64(in.NodeID))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventNodeHighlightRequested) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventNodeHighlightRequested) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventNodeHighlightRequested) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventNodeHighlightRequested) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay17(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay18(in *jlexer.Lexer, out *EventInspectNodeRequested) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "backendNodeId":
			(out.BackendNodeID).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay18(out *jwriter.Writer, in EventInspectNodeRequested) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"backendNodeId\":")
	out.Int64(int64(in.BackendNodeID))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventInspectNodeRequested) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventInspectNodeRequested) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventInspectNodeRequested) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventInspectNodeRequested) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay18(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay19(in *jlexer.Lexer, out *EnableParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay19(out *jwriter.Writer, in EnableParams) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnableParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnableParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnableParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnableParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay19(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay20(in *jlexer.Lexer, out *DisableParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay20(out *jwriter.Writer, in DisableParams) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DisableParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DisableParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpOverlay20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DisableParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DisableParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpOverlay20(l, v)
}
